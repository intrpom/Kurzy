generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id             String       @id @default(cuid())
  slug           String       @unique
  title          String
  subtitle       String?
  description    String
  imageUrl       String?
  price          Float        @default(0)
  isFeatured     Boolean      @default(false)
  level          String?
  tags           String[]
  progress       Int?
  completed      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  videoLibraryId String?
  modules        Module[]
  userCourses    UserCourse[]
}

model Module {
  id             String   @id @default(cuid())
  title          String
  description    String?
  order          Int
  completed      Boolean  @default(false)
  courseId       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  videoLibraryId String?
  lessons        Lesson[]
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Lesson {
  id             String     @id @default(cuid())
  title          String
  description    String?
  duration       Int
  videoUrl       String?
  order          Int
  completed      Boolean    @default(false)
  moduleId       String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  videoLibraryId String?
  module         Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  materials      Material[]
}

model Material {
  id        String   @id @default(cuid())
  title     String
  type      String
  url       String?
  content   String?
  lessonId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model BlogPost {
  id              String           @id @default(cuid())
  slug            String           @unique
  title           String
  subtitle        String?
  content         String?
  videoUrl        String?
  videoLibraryId  String?
  thumbnailUrl    String?
  tags            String[]
  isPublished     Boolean          @default(true)
  views           Int              @default(0)
  duration        Int?
  price           Float            @default(0)
  isPaid          Boolean          @default(false)
  publishedAt     DateTime         @default(now())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  buttonText      String?
  buttonUrl       String?
  buttonEnabled   Boolean          @default(false)
  userMiniCourses UserMiniCourse[]

  @@index([isPublished])
  @@index([isPaid])
  @@index([publishedAt])
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  role               String               @default("user")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  tokens             AuthToken[]
  userCourses        UserCourse[]
  userLessonProgress UserLessonProgress[]
  userMiniCourses    UserMiniCourse[]
}

model AuthToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  progress  Int      @default(0)
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model UserLessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completed   Boolean  @default(true)
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model UserMiniCourse {
  id              String   @id @default(cuid())
  userId          String
  blogPostId      String
  purchaseDate    DateTime @default(now())
  price           Float
  stripePaymentId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  blogPost        BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, blogPostId])
  @@index([userId])
  @@index([blogPostId])
}

model TestTable {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
}
