/**
 * Glob√°ln√≠ spr√°va stavu p≈ôihl√°≈°en√≠ pro celou aplikaci
 * Jedna kontrola p≈ôi naƒçten√≠ webu, pak pou≈æ√≠v√°n√≠ cache po celou dobu
 */

interface AuthState {
  isAuthenticated: boolean;
  isInitialized: boolean;
  user: any | null;
}



class GlobalAuthState {
  private state: AuthState = {
    isAuthenticated: false,
    isInitialized: false,
    user: null
  };

  private listeners: Array<(state: AuthState) => void> = [];

  /**
   * Inicializace - prov√°d√≠ se jen jednou p≈ôi prvn√≠ n√°v≈°tƒõvƒõ
   */
  async initialize(): Promise<void> {
    if (this.state.isInitialized) return;

    console.log('üîç GlobalAuthState: Inicializace stavu p≈ôihl√°≈°en√≠...');

    try {
      // 1. Zkontroluj localStorage verifikaci
      const isVerified = this.getStoredVerification();
      
      // 2. Zkontroluj session cookies
      const hasAuthCookie = this.hasAuthCookies();

      if (isVerified && hasAuthCookie) {
        // ‚úÖ OVƒö≈òEN√ù + platn√© cookies = pou≈æij localStorage data
        const storedUser = this.getStoredUser();
        console.log('‚úÖ Pou≈æ√≠v√°m ulo≈æen√Ω stav u≈æivatele (BEZ API vol√°n√≠)');
        this.setState({
          isAuthenticated: true,
          isInitialized: true,
          user: storedUser
        });
      } else if (isVerified && !hasAuthCookie) {
        // ‚ùå OVƒö≈òEN√ù ale cookies vypr≈°ely = sma≈æ localStorage a odhl√°s
        console.log('‚ùå Session cookies vypr≈°ely, ma≈æu localStorage');
        this.clearStoredAuth();
        this.setState({
          isAuthenticated: false,
          isInitialized: true,
          user: null
        });
      } else if (!isVerified && hasAuthCookie) {
        // üîç Cookies jsou, ale localStorage nen√≠ = mo≈æn√° nov√Ω prohl√≠≈æeƒç
        console.log('üîç DEBUG: isVerified =', isVerified, 'hasAuthCookie =', hasAuthCookie);
        console.log('üîç DEBUG: cookies =', typeof document !== 'undefined' ? document.cookie : 'server-side');
        
        // KONZERVATIVN√ç p≈ô√≠stup: Pouze pokud jsou cookies opravdu validn√≠
        if (hasAuthCookie && document.cookie.includes('session=')) {
          console.log('üîç M√°m session cookie, ovƒõ≈ôuji API...');
          const user = await this.verifyAuthWithAPI();
          if (user) {
            this.storeUserAuth(user);
          }
          this.setState({
            isAuthenticated: !!user,
            isInitialized: true,
            user: user
          });
        } else {
          // Fallback - pova≈æovat za nep≈ôihl√°≈°en√©ho
          console.log('üîç ≈Ω√°dn√° session cookie, pova≈æuji za nep≈ôihl√°≈°en√©ho');
          this.setState({
            isAuthenticated: false,
            isInitialized: true,
            user: null
          });
        }
      } else {
        // ‚ùå ≈Ω√°dn√© indik√°tory = nep≈ôihl√°≈°en√Ω
        console.log('‚ùå ≈Ω√°dn√© indik√°tory p≈ôihl√°≈°en√≠');
        this.setState({
          isAuthenticated: false,
          isInitialized: true,
          user: null
        });
      }
    } catch (error) {
      console.error('GlobalAuthState: Chyba p≈ôi inicializaci:', error);
      // V p≈ô√≠padƒõ chyby pova≈æuj za nep≈ôihl√°≈°en√©ho a sma≈æ localStorage
      this.clearStoredAuth();
      this.setState({
        isAuthenticated: false,
        isInitialized: true,
        user: null
      });
    }
  }

  /**
   * Kontrola auth cookies
   */
  private hasAuthCookies(): boolean {
    if (typeof document === 'undefined') return false;
    return document.cookie.includes('session') || document.cookie.includes('user_id');
  }

  /**
   * Z√≠sk√°n√≠ ulo≈æen√©ho stavu verifikace
   */
  private getStoredVerification(): boolean {
    if (typeof localStorage === 'undefined') return false;
    return localStorage.getItem('user_verified') === 'true';
  }

  /**
   * Z√≠sk√°n√≠ ulo≈æen√Ωch dat u≈æivatele
   */
  private getStoredUser(): any | null {
    if (typeof localStorage === 'undefined') return null;
    try {
      const userData = localStorage.getItem('user_data');
      return userData ? JSON.parse(userData) : null;
    } catch {
      return null;
    }
  }

  /**
   * Ulo≈æen√≠ stavu p≈ôihl√°≈°en√©ho u≈æivatele
   */
  private storeUserAuth(user: any): void {
    if (typeof localStorage === 'undefined') return;
    try {
      localStorage.setItem('user_verified', 'true');
      localStorage.setItem('user_data', JSON.stringify(user));
      console.log('üíæ U≈æivatelsk√Ω stav ulo≈æen do localStorage');
    } catch (error) {
      console.error('Chyba p≈ôi ukl√°d√°n√≠ do localStorage:', error);
    }
  }

  /**
   * Smaz√°n√≠ ulo≈æen√©ho stavu
   */
  private clearStoredAuth(): void {
    if (typeof localStorage === 'undefined') return;
    localStorage.removeItem('user_verified');
    localStorage.removeItem('user_data');
    console.log('üóëÔ∏è U≈æivatelsk√Ω stav smaz√°n z localStorage');
  }



  /**
   * Ovƒõ≈ôen√≠ p≈ôes API
   */
  private async verifyAuthWithAPI(): Promise<any | null> {
    try {
      const response = await fetch('/api/auth/me', {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        },
        credentials: 'include'
      });

      if (response.ok) {
        const data = await response.json();
        return data.authenticated ? data.user : null;
      }
    } catch (error) {
      console.error('GlobalAuthState: API ovƒõ≈ôen√≠ selhalo:', error);
    }
    
    return null;
  }

  /**
   * Aktualizace stavu
   */
  private setState(newState: Partial<AuthState>): void {
    this.state = { ...this.state, ...newState };
    console.log('üîÑ GlobalAuthState: Stav aktualizov√°n:', this.state);
    
    // Notify v≈°echny listeners
    this.listeners.forEach(listener => listener(this.state));
  }

  /**
   * Z√≠sk√°n√≠ aktu√°ln√≠ho stavu
   */
  getState(): AuthState {
    return { ...this.state };
  }

  /**
   * Je u≈æivatel p≈ôihl√°≈°en√Ω?
   */
  isAuthenticated(): boolean {
    return this.state.isAuthenticated;
  }

  /**
   * Je stav inicializovan√Ω?
   */
  isInitialized(): boolean {
    return this.state.isInitialized;
  }

  /**
   * Z√≠sk√°n√≠ u≈æivatele
   */
  getUser(): any | null {
    return this.state.user;
  }

  /**
   * P≈ôihl√°≈°en√≠ u≈æivatele
   */
  login(user: any): void {
    this.storeUserAuth(user);
    this.setState({
      isAuthenticated: true,
      user: user
    });
  }

  /**
   * Odhl√°≈°en√≠ u≈æivatele
   */
  logout(): void {
    this.clearStoredAuth();
    this.setState({
      isAuthenticated: false,
      user: null
    });
  }

  /**
   * Registrace listener pro zmƒõny stavu
   */
  subscribe(listener: (state: AuthState) => void): () => void {
    this.listeners.push(listener);
    
    // Vra≈• unsubscribe funkci
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  /**
   * Vynucen√° reinicializace (nap≈ô. po logout)
   */
  reinitialize(): Promise<void> {
    this.state.isInitialized = false;
    return this.initialize();
  }
}

// Singleton instance
const globalAuthState = new GlobalAuthState();

export default globalAuthState;
