import { NextRequest, NextResponse } from 'next/server';
import { constructWebhookEvent } from '@/lib/stripe';
import { prisma } from '@/lib/prisma';
import { updateUserAfterPurchase } from '@/lib/fluentcrm';

export async function POST(request: NextRequest) {
  try {
    console.log('üéØ STRIPE WEBHOOK P≈òIJAT');
    
    const body = await request.text();
    const signature = request.headers.get('stripe-signature');

    if (!signature) {
      console.log('‚ùå Chyb√≠ Stripe signatura');
      return NextResponse.json(
        { error: 'Chyb√≠ Stripe signatura' },
        { status: 400 }
      );
    }

    // Ovƒõ≈ôen√≠ webhook signatury
    const event = constructWebhookEvent(body, signature);
    console.log(`üì® Ud√°lost typu: ${event.type}`);

    // Zpracov√°n√≠ ud√°losti podle typu
    switch (event.type) {
      case 'checkout.session.completed':
        await handleCheckoutCompleted(event.data.object);
        break;
      
      case 'payment_intent.succeeded':
        await handlePaymentSucceeded(event.data.object);
        break;
      
      default:
        console.log(`‚ÑπÔ∏è Nezpracovan√° ud√°lost: ${event.type}`);
    }

    return NextResponse.json({ received: true });

  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ webhook:', error);
    return NextResponse.json(
      { error: 'Chyba p≈ôi zpracov√°n√≠ webhook' },
      { status: 400 }
    );
  }
}

// Zpracov√°n√≠ √∫spƒõ≈°n√© platby
async function handleCheckoutCompleted(session: any) {
  try {
    console.log('=== STRIPE WEBHOOK: checkout.session.completed ===');
    console.log('Session ID:', session.id);
    console.log('Customer email:', session.customer_details?.email);
    console.log('Session metadata:', session.metadata);
    
    const { courseId, courseSlug } = session.metadata;
    
    if (!courseId) {
      console.error('Chyb√≠ courseId v session metadata');
      return;
    }

    // BEZPEƒåNOSTN√ç KONTROLA: Ovƒõ≈ôit ≈æe kurz existuje v na≈°√≠ datab√°zi
    const course = await prisma.course.findUnique({
      where: { id: courseId },
      select: { id: true, title: true, slug: true }
    });

    if (!course) {
      console.log(`üö´ WEBHOOK IGNOROV√ÅN: Kurz s ID "${courseId}" neexistuje v datab√°zi t√©to aplikace`);
      console.log('=== KONEC WEBHOOK (IGNOROV√ÅN) ===');
      return;
    }

    console.log(`‚úÖ KURZ OVƒö≈òEN: ${course.title} (${course.slug})`);

    // Naj√≠t u≈æivatele podle emailu z checkout session
    const user = await prisma.user.findFirst({
      where: { email: session.customer_details?.email }
    });

    if (!user) {
      console.error('U≈æivatel nenalezen:', session.customer_details?.email);
      return;
    }

    // P≈ôidat kurz u≈æivateli
    await prisma.userCourse.upsert({
      where: {
        userId_courseId: {
          userId: user.id,
          courseId: courseId,
        },
      },
      update: {
        progress: 0,
        completed: false,
        updatedAt: new Date(),
      },
      create: {
        userId: user.id,
        courseId: courseId,
        progress: 0,
        completed: false,
      },
    });

    console.log(`‚úÖ Kurz ${courseId} byl √∫spƒõ≈°nƒõ p≈ôid√°n u≈æivateli ${user.id}`);

    // P≈ôidat u≈æivatele do FluentCRM po n√°kupu kurzu
    try {
      console.log('üîÑ Aktualizuji u≈æivatele v FluentCRM po n√°kupu kurzu...');
      
      // Pou≈æijeme ji≈æ naƒçten√Ω kurz (m√°me ho z bezpeƒçnostn√≠ kontroly)
      const fluentResponse = await updateUserAfterPurchase(
        user.email,
        course.title,
        course.slug
      );
      
      if (fluentResponse.success) {
        console.log('‚úÖ U≈æivatel √∫spƒõ≈°nƒõ aktualizov√°n v FluentCRM po n√°kupu:', user.email);
      } else {
        console.warn('‚ö†Ô∏è Nepoda≈ôilo se aktualizovat u≈æivatele v FluentCRM:', fluentResponse.message);
      }
    } catch (error) {
      console.error('‚ùå Chyba p≈ôi aktualizaci FluentCRM po n√°kupu:', error);
      // Pokraƒçujeme i kdy≈æ se nepoda≈ô√≠ aktualizovat CRM - nekritick√° chyba
    }

    console.log('=== WEBHOOK √öSPƒö≈†Nƒö ZPRACOV√ÅN ===');

  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ checkout.completed:', error);
  }
}

// Zpracov√°n√≠ √∫spƒõ≈°n√© platby (fallback)
async function handlePaymentSucceeded(paymentIntent: any) {
  try {
    // Tady m≈Ø≈æeme p≈ôidat dal≈°√≠ logiku pro zpracov√°n√≠ platby
    console.log('Payment succeeded:', paymentIntent.id);
  } catch (error) {
    console.error('Chyba p≈ôi zpracov√°n√≠ payment.succeeded:', error);
  }
}
