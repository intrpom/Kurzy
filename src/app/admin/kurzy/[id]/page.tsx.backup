'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { FiSave, FiX, FiPlus, FiTrash2, FiChevronUp, FiChevronDown } from 'react-icons/fi';
import ImageUploader from '@/components/ImageUploader';
import VideoUrlInput from '@/components/VideoUrlInput';

interface Material {
  id?: string;
  title: string;
  type: string;
  url?: string;
  content?: string;
}

interface Lesson {
  id: string;
  title: string;
  description?: string;
  duration: number;
  videoUrl?: string;
  order: number;
  completed: boolean;
  materials: Material[];
}

interface Module {
  id: string;
  title: string;
  description?: string;
  order: number;
  completed: boolean;
  lessons: Lesson[];
}

interface Course {
  id: string;
  slug: string;
  title: string;
  subtitle?: string;
  description: string;
  imageUrl?: string;
  price: number;
  isFeatured: boolean;
  level?: string;
  tags: string[];
  progress?: number;
  completed: boolean;
  modules: Module[];
}

export default function EditCoursePage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [course, setCourse] = useState<Course | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [expandedModules, setExpandedModules] = useState<Record<string, boolean>>({});
  
  useEffect(() => {
    const fetchCourse = async () => {
      try {
        setIsLoading(true);
        const response = await fetch(`/api/courses/${params.id}`);
        
        if (!response.ok) {
          throw new Error('Nepodařilo se načíst kurz');
        }
        
        const data = await response.json();
        
        // Zajistíme, že všechna pole jsou správně inicializována
        const processedData = {
          ...data,
          tags: Array.isArray(data.tags) ? data.tags : [],
          modules: Array.isArray(data.modules) ? data.modules.map((module: any) => ({
            ...module,
            lessons: Array.isArray(module.lessons) ? module.lessons.map((lesson: any) => ({
              ...lesson,
              materials: Array.isArray(lesson.materials) ? lesson.materials : []
            })) : []
          })) : []
        };
        
        setCourse(processedData);
        
        // Nastavení všech modulů jako sbalených
        const initialExpandState: Record<string, boolean> = {};
        if (Array.isArray(processedData.modules)) {
          processedData.modules.forEach((module: Module) => {
            initialExpandState[module.id] = false;
          });
        }
        setExpandedModules(initialExpandState);
      } catch (err) {
        setError('Došlo k chybě při načítání kurzu');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };
    
    fetchCourse();
  }, [params.id]);
  
  const handleCourseChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    if (!course) return;
    
    setCourse({
      ...course,
      [name]: value
    });
  };
  
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    if (!course) return;
    
    setCourse({
      ...course,
      [name]: checked
    });
  };
  
  const handleTagsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!course) return;
    
    const tags = e.target.value.split(',').map(tag => tag.trim());
    setCourse({
      ...course,
      tags
    });
  };
  
  const toggleModuleExpand = (moduleId: string) => {
    setExpandedModules(prev => ({
      ...prev,
      [moduleId]: !prev[moduleId]
    }));
  };
  
  const handleModuleChange = (moduleId: string, field: string, value: any) => {
    if (!course) return;
    
    setCourse({
      ...course,
      modules: course.modules.map(module => 
        module.id === moduleId ? { ...module, [field]: value } : module
      )
    });
  };
  
  const handleLessonChange = (moduleId: string, lessonId: string, field: string, value: any) => {
    if (!course) return;
    
    setCourse({
      ...course,
      modules: course.modules.map(module => 
        module.id === moduleId ? {
          ...module,
          lessons: module.lessons.map(lesson => 
            lesson.id === lessonId ? { ...lesson, [field]: value } : lesson
          )
        } : module
      )
    });
  };
  
  const addModule = async () => {
    if (!course) return;
    
    try {
      const response = await fetch('/api/modules', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title: 'Nový modul',
          courseId: course.id
        })
      });
      
      if (!response.ok) {
        throw new Error('Nepodařilo se přidat modul');
      }
      
      const newModule = await response.json();
      
      setCourse({
        ...course,
        modules: [...course.modules, newModule]
      });
      
      // Automaticky rozbalit nový modul
      setExpandedModules(prev => ({
        ...prev,
        [newModule.id]: true
      }));
    } catch (err) {
      setError('Došlo k chybě při přidávání modulu');
      console.error(err);
    }
  };
  
  const deleteModule = async (moduleId: string) => {
    if (!course) return;
    
    if (!confirm('Opravdu chcete smazat tento modul? Budou smazány i všechny jeho lekce.')) {
      return;
    }
    
    try {
      const response = await fetch(`/api/modules/${moduleId}`, {
        method: 'DELETE'
      });
      
      if (!response.ok) {
        throw new Error('Nepodařilo se smazat modul');
      }
      
      setCourse({
        ...course,
        modules: course.modules.filter(module => module.id !== moduleId)
      });
    } catch (err) {
      setError('Došlo k chybě při mazání modulu');
      console.error(err);
    }
  };
  
  const addLesson = async (moduleId: string) => {
    if (!course) return;
    
    try {
      const response = await fetch('/api/lessons', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          title: 'Nová lekce',
          duration: 0,
          moduleId
        })
      });
      
      if (!response.ok) {
        throw new Error('Nepodařilo se přidat lekci');
      }
      
      const newLesson = await response.json();
      
      setCourse({
        ...course,
        modules: course.modules.map(module => 
          module.id === moduleId ? {
            ...module,
            lessons: [...module.lessons, newLesson]
          } : module
        )
      });
    } catch (err) {
      setError('Došlo k chybě při přidávání lekce');
      console.error(err);
    }
    
    const newLesson = await response.json();
    
    setCourse({
      ...course,
      modules: course.modules.map(module => 
        module.id === moduleId ? {
          ...module,
          lessons: [...module.lessons, newLesson]
        } : module
      )
    });
  } catch (err) {
    setError('Došlo k chybě při přidávání lekce');
    console.error(err);
  }
};

const deleteLesson = async (moduleId: string, lessonId: string) => {
  if (!course) return;
  
  if (!confirm('Opravdu chcete smazat tuto lekci?')) {
    return;
  }
  
  try {
    const response = await fetch(`/api/lessons/${lessonId}`, {
      method: 'DELETE'
    });
    
    if (!response.ok) {
      throw new Error('Nepodařilo se smazat lekci');
    }
    
    setCourse({
      ...course,
      modules: course.modules.map(module => 
        module.id === moduleId ? {
          ...module,
          lessons: module.lessons.filter(lesson => lesson.id !== lessonId)
        } : module
      )
    });
  } catch (err) {
    setError('Došlo k chybě při mazání lekce');
    console.error(err);
  }
};

const handleSave = async () => {
  if (!course) return;
  
  try {
    setIsSaving(true);
    setError(null); // Resetujeme předchozí chyby
    
    console.log('Začínám ukládat kurz:', course.id);
    
    // Připravíme data s ověřením, že všechna pole jsou správně inicializována
    const preparedCourse = {
      ...course,
      tags: Array.isArray(course.tags) ? course.tags : [],
      modules: Array.isArray(course.modules) ? course.modules.map(module => ({
        ...module,
        lessons: Array.isArray(module.lessons) ? module.lessons.map(lesson => ({
          ...lesson,
          materials: Array.isArray(lesson.materials) ? lesson.materials : []
        })) : []
      })) : []
    };
    
    // Vytvoříme nový endpoint pro hromadné ukládání celého kurzu včetně modulů a lekcí
    try {
      console.log('Odesílám kompletní data kurzu pro hromadné uložení');
      const batchSaveResponse = await fetch(`/api/courses/${preparedCourse.id}/batch-save`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(preparedCourse)
      });
      
      if (!batchSaveResponse.ok) {
        const errorData = await batchSaveResponse.json().catch(() => ({}));
        console.error('Chyba při hromadném ukládání kurzu:', batchSaveResponse.status, errorData);
        throw new Error(`Nepodařilo se uložit kurz (${batchSaveResponse.status}): ${errorData.error || ''}`);
      }
      
      const result = await batchSaveResponse.json();
      console.log('Kurz úspěšně uložen včetně všech modulů a lekcí:', result);
    } catch (error: any) {
      console.error('Chyba při hromadném ukládání kurzu:', error);
      throw new Error(`Chyba při ukládání kurzu: ${error.message}`);
    }
    
    console.log('Vše úspěšně uloženo, přesměrovávám...');
    // Použití window.location.href místo router.push pro zajištění správného přesměrování
    window.location.href = '/admin/kurzy';
  } catch (err: any) {
    console.error('Chyba při ukládání:', err);
    setError(err.message || 'Došlo k chybě při ukládání kurzu');
    // Zobrazíme chybu uživateli (alert pro okamžitou viditelnost)
    alert(`Chyba při ukládání: ${err.message || 'Neznámá chyba'}`);
  } finally {
    setIsSaving(false);
  }
};

if (isLoading) {
  return (
    <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
    </div>
  );
}

if (error) {
  return (
    <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md">
      <p>{error}</p>
    </div>
  );
}

if (!course) {
  return (
    <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md">
      <p>Kurz nebyl nalezen</p>
    </div>
  );
}

return (
  <div>
    <div className="flex justify-between items-center mb-6">
      <h1 className="text-3xl font-serif font-bold">Upravit kurz</h1>
    </div>
    
    {error && (
      <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md mb-6">
  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md">
        <p>{error}</p>
      </div>
    );
  }
  
  if (!course) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md">
        <p>Kurz nebyl nalezen</p>
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-serif font-bold">Upravit kurz</h1>
      </div>
      
      {error && (
        <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md mb-6">
          <p>{error}</p>
        </div>
      )}
      
      <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <h2 className="text-xl font-medium mb-4">Základní informace</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="title">
              Název kurzu *
            </label>
            <input
              type="text"
              id="title"
              name="title"
              value={course.title}
              onChange={handleCourseChange}
              required
              className="w-full p-2 border border-neutral-300 rounded-md"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="slug">
              Slug (URL) *
            </label>
            <input
              type="text"
              id="slug"
              name="slug"
              value={course.slug}
              onChange={handleCourseChange}
              required
              className="w-full p-2 border border-neutral-300 rounded-md"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="subtitle">
              Krátký popis kurzu * <span className="text-xs text-neutral-500">(zobrazí se na přehledové stránce)</span>
            </label>
            <input
              type="text"
              id="subtitle"
              name="subtitle"
              value={course.subtitle || ''}
              onChange={handleCourseChange}
              className="w-full p-2 border border-neutral-300 rounded-md"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1">
              Obrázek kurzu
            </label>
            <ImageUploader
              currentImageUrl={course.imageUrl}
              onImageUpload={(url) => {
                setCourse({
                  ...course,
                  imageUrl: url
                });
              }}
              folder="courses"
            />
          </div>
          
          <div className="md:col-span-2">
            <label className="block text-sm font-medium mb-1" htmlFor="description">
              Dlouhý popis kurzu * <span className="text-xs text-neutral-500">(podporuje Markdown, zobrazí se na stránce kurzu)</span>
            </label>
            <textarea
              id="description"
              name="description"
              value={course.description}
              onChange={handleCourseChange}
              required
              rows={10}
              className="w-full p-2 border border-neutral-300 rounded-md font-mono text-sm"
              placeholder="# Nadpis\n\nOdstavec textu\n\n- Odrážka 1\n- Odrážka 2\n\n**Tučný text** a *kurzíva*\n\n[Odkaz](https://example.com)"
            ></textarea>
            <div className="mt-1 text-xs text-neutral-500">
              <p>Tipy pro formátování:</p>
              <ul className="list-disc pl-5 mt-1 space-y-1">
                <li><code># Nadpis</code> pro hlavní nadpis, <code>## Nadpis</code> pro podnadpis</li>
                <li><code>**tučný text**</code> pro <strong>tučný text</strong></li>
                <li><code>*kurzíva*</code> pro <em>kurzívu</em></li>
                <li><code>- položka</code> pro odrážkový seznam</li>
                <li><code>[text odkazu](URL)</code> pro <a href="#" className="text-primary-600">odkaz</a></li>
              </ul>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="price">
              Cena (Kč)
            </label>
            <input
              type="number"
              id="price"
              name="price"
              value={course.price}
              onChange={handleCourseChange}
              min="0"
              step="1"
              className="w-full p-2 border border-neutral-300 rounded-md"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="level">
              Úroveň
            </label>
            <select
              id="level"
              name="level"
              value={course.level || 'beginner'}
              onChange={handleCourseChange}
              className="w-full p-2 border border-neutral-300 rounded-md"
            >
              <option value="beginner">Začátečník</option>
              <option value="intermediate">Mírně pokročilý</option>
              <option value="advanced">Pokročilý</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="tags">
              Tagy (oddělené čárkou)
            </label>
            <input
              type="text"
              id="tags"
              name="tags"
              value={course.tags.join(', ')}
              onChange={handleTagsChange}
              className="w-full p-2 border border-neutral-300 rounded-md"
            />
          </div>
          
          <div className="flex items-center">
            <input
              type="checkbox"
              id="isFeatured"
              name="isFeatured"
              checked={course.isFeatured}
              onChange={handleCheckboxChange}
              className="mr-2"
            />
            <label htmlFor="isFeatured">
              Doporučený kurz
            </label>
          </div>
        </div>
      </div>
      
      <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-medium">Moduly kurzu</h2>
          <button
            type="button"
            onClick={addModule}
            className="px-3 py-2 bg-primary-600 text-white rounded-md flex items-center text-sm"
          >
            <FiPlus className="mr-1" /> Přidat modul
          </button>
        </div>
        
        {course.modules.length === 0 ? (
          <div className="text-center py-8 text-neutral-500">
            <p>Tento kurz zatím nemá žádné moduly</p>
            <button
              type="button"
              onClick={addModule}
              className="mt-2 px-4 py-2 bg-primary-600 text-white rounded-md flex items-center mx-auto"
            >
              <FiPlus className="mr-2" /> Přidat první modul
            </button>
          </div>
        ) : (
          <div className="space-y-4">
            {course.modules.map((module, moduleIndex) => (
              <div key={module.id} className="border border-neutral-200 rounded-md overflow-hidden">
                <div 
                  className="flex justify-between items-center p-4 bg-neutral-50 cursor-pointer"
                  onClick={() => toggleModuleExpand(module.id)}
                >
                  <div className="flex items-center">
                    <span className="font-medium">
                      Modul {moduleIndex + 1}: {module.title}
                    </span>
                    <span className="ml-2 text-sm text-neutral-500">
                      ({module.lessons.length} lekcí)
                    </span>
                  </div>
                  <div className="flex items-center">
                    <button
                      type="button"
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteModule(module.id);
                      }}
                      className="p-1 text-red-600 hover:bg-red-50 rounded mr-2"
                      title="Smazat modul"
                    >
                      <FiTrash2 size={16} />
                    </button>
                    {expandedModules[module.id] ? (
                      <FiChevronUp size={20} />
                    ) : (
                      <FiChevronDown size={20} />
                    )}
                  </div>
                </div>
                
                {expandedModules[module.id] && (
                  <div className="p-4 border-t border-neutral-200">
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Název modulu
                      </label>
                      <input
                        type="text"
                        value={module.title}
                        onChange={(e) => handleModuleChange(module.id, 'title', e.target.value)}
                        className="w-full p-2 border border-neutral-300 rounded-md"
                      />
                    </div>
                    
                    <div className="mb-4">
                      <label className="block text-sm font-medium mb-1">
                        Popis modulu
                      </label>
                      <textarea
                        value={module.description || ''}
                        onChange={(e) => handleModuleChange(module.id, 'description', e.target.value)}
                        rows={3}
                        className="w-full p-2 border border-neutral-300 rounded-md"
                      ></textarea>
                    </div>
                    
                    <div className="mb-4">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="font-medium">Lekce</h3>
                        <button
                          type="button"
                          onClick={() => addLesson(module.id)}
                          className="px-2 py-1 bg-primary-600 text-white rounded-md flex items-center text-sm"
                        >
                          <FiPlus className="mr-1" /> Přidat lekci
                        </button>
                      </div>
                      
                      {module.lessons.length === 0 ? (
                        <div className="text-center py-4 text-neutral-500 border border-dashed border-neutral-200 rounded-md">
                          <p>Tento modul zatím nemá žádné lekce</p>
                        </div>
                      ) : (
                        <div className="space-y-2">
                          {module.lessons.map((lesson, lessonIndex) => (
                            <div key={lesson.id} className="border border-neutral-200 rounded-md p-3">
                              <div className="flex justify-between items-center mb-2">
                                <span className="font-medium">
                                  Lekce {lessonIndex + 1}: {lesson.title}
                                </span>
                                <button
                                  type="button"
                                  onClick={() => deleteLesson(module.id, lesson.id)}
                                  className="p-1 text-red-600 hover:bg-red-50 rounded"
                                  title="Smazat lekci"
                                >
                                  <FiTrash2 size={16} />
                                </button>
                              </div>
                              
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                <div>
                                  <label className="block text-xs font-medium mb-1">
                                    Název lekce
                                  </label>
                                  <input
                                    type="text"
                                    value={lesson.title}
                                    onChange={(e) => handleLessonChange(module.id, lesson.id, 'title', e.target.value)}
                                    className="w-full p-1 text-sm border border-neutral-300 rounded-md"
                                  />
                                </div>
                                
                                <div>
                                  <label className="block text-xs font-medium mb-1">
                                    Video z Bunny.net
                                  </label>
                                  <VideoUrlInput
                                    currentUrl={lesson.videoUrl || ''}
                                    onUrlChange={(url) => handleLessonChange(module.id, lesson.id, 'videoUrl', url)}
                                  />
                                </div>
                                
                                <div>
                                  <label className="block text-xs font-medium mb-1">
                                    Délka (minuty)
                                  </label>
                                  <input
                                    type="number"
                                    value={lesson.duration}
                                    onChange={(e) => handleLessonChange(module.id, lesson.id, 'duration', parseInt(e.target.value))}
                                    min="0"
                                    className="w-full p-1 text-sm border border-neutral-300 rounded-md"
                                  />
                                </div>
                                
                                <div className="md:col-span-2">
                                  <label className="block text-xs font-medium mb-1">
                                    Text nad videem <span className="text-neutral-500">(podporuje Markdown)</span>
                                  </label>
                                  <textarea
                                    value={lesson.description || ''}
                                    onChange={(e) => handleLessonChange(module.id, lesson.id, 'description', e.target.value)}
                                    rows={3}
                                    className="w-full p-1 text-sm border border-neutral-300 rounded-md font-mono"
                                    placeholder="Text, který se zobrazí nad videem v lekci. Můžete použít **tučné**, *kurzívu*, [odkazy](https://example.com) a další Markdown."
                                  />
                                </div>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
      
      <div className="flex justify-end space-x-2">
        <button
          type="button"
          onClick={() => router.push('/admin/kurzy')}
          className="px-4 py-2 border border-neutral-300 rounded-md flex items-center"
          disabled={isSaving}
        >
          <FiX className="mr-2" /> Zrušit
        </button>
        <button
          type="button"
          onClick={handleSave}
          className="px-4 py-2 bg-primary-600 text-white rounded-md flex items-center"
          disabled={isSaving}
        >
          <FiSave className="mr-2" />
          {isSaving ? 'Ukládám...' : 'Uložit změny'}
        </button>
      </div>
    </div>
  );
}
